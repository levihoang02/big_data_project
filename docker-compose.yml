version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - kafka-net

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    networks:
      - kafka-net
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${DB_USER:-iot_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-iot_password}
      POSTGRES_DB: ${DB_NAME:-iot_db}
    ports:
      - "5432:5432"
    volumes:
      - ./config/database_config/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./config/database_config/postgres.conf:/etc/postgresql/postgresql.conf:ro
      - postgres_data:/var/lib/postgresql/data
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    networks:
      - kafka-net
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  sensor-producer:
    build:
      context: ./backend/src/producers
      dockerfile: Dockerfile
    depends_on:
      - kafka
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    networks:
      - kafka-net

  stream_consumer:
    build:
      context: ./backend/src/consumers
      dockerfile: Dockerfile
    depends_on:
      - kafka
    environment:
      - SOCKET_URL=http://app:5000
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    networks:
      - kafka-net

  store_consumer:
    build:
      context: ./backend/src/store_consumer
      dockerfile: Dockerfile
    depends_on:
      - kafka
      - postgres
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=iot_db
      - DB_USER=iot_user
      - DB_PASSWORD=iot_password
      - DATABASE_URL=postgresql+psycopg2://iot_user:iot_password@postgres:5432/iot_db
    networks:
      - kafka-net
  
  app:
    build:
      context: ./backend/src/app
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    volumes:
      - ./backend/src/app:/app
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=development
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=iot_db
      - DB_USER=iot_user
      - DB_PASSWORD=iot_password
    depends_on:
      - kafka
      - postgres
    networks:
      - kafka-net

networks:
  kafka-net:
    driver: bridge

volumes:
  postgres_data:
